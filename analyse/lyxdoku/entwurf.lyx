#LyX 1.1 created this file. For more info see http://www.lyx.org/
\lyxformat 2,16
\textclass article
\begin_preamble
\usepackage[T1]{fontenc}
\usepackage[latin1]{inputenc}
\usepackage{a4wide}
\usepackage{babel}
\usepackage{graphics}

\makeatletter


\usepackage[T1]{fontenc}
\usepackage[latin1]{inputenc}
\usepackage{a4wide}
\usepackage{babel}
\usepackage{graphics}

\makeatother
\end_preamble
\language german
\inputencoding latin1
\fontscheme default
\graphics default
\float_placement !hp
\paperfontsize default
\spacing single 
\papersize a4paper
\paperpackage a4
\use_geometry 0
\use_amsmath 1
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language english
\quotes_times 2
\papercolumns 1
\papersides 1
\paperpagestyle default

\layout Title

Entwurf
\newline 
 Software Engineering Praktikum SS 2001
\newline 
 Gruppe
\newline 

\begin_inset Figure size 306 101
file eps/worstcaseslogo.eps
flags 11

\end_inset 


\newline 
 Virtuelle Konferenz
\lang american
1616
\layout Standard


\latex latex 

\backslash 
vfill{}
\layout Standard
\added_space_top 0,3cm \added_space_bottom 0,3cm \align center \LyXTable
multicol5
5 3 0 0 -1 -1 -1 -1
1 1 0 0
1 1 0 0
1 1 0 0
1 1 0 0
1 1 0 0
8 1 0 "" ""
8 1 0 "" ""
8 1 1 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""

Version
\newline 
Datum
\newline 
Autor
\newline 
0.1
\newline 
14.05.2001
\newline 
Andreas Büthe
\newline 
0.2
\newline 
15.05.2001
\newline 
Andreas Büthe
\newline 
0.5
\newline 
16.05.2001
\newline 
Andreas Büthe
\newline 
0.6
\newline 

\newline 
Fabian Rotte
\layout Standard


\latex latex 

\backslash 
newpage
\layout Standard


\begin_inset LatexCommand \tableofcontents{}

\end_inset 


\latex latex 
 
\backslash 
newpage
\layout Section

Einleitung
\layout Standard

Das vorliegende Dokument ist die entwurfstechnische Umsetzung der im Pflichtenhe
ft beschriebenen Funktionen und Anforderungen für das Programmpaket Virtuelle
 Konferenz.
 Ziel dieses Dokuments ist es, aufzuzeigen, dass die entworfene Struktur
 geeignet ist, die geforderte Funktionalität auf leicht verständliche und
 einfache Weise zu gewährleisten.
 Zudem wurde Wert auf eine Struktur gelegt, die offen für eventuelle Erweiterung
en in der Design-Phase ist.
\layout Standard

Um die Systemstruktur und entsprechende Zusammenhänge abzubilden, werden
 sowohl verschiedene Diagrammtypen als auch eine textuelle Beschreibung
 verwendet.
 In Aktivitätsdiagrammen werden informell Abläufe im System dargestellt,
 mit dem Ziel, einen Ausgangspunkt für den Entwurf der benötigten Struktur
 zu schaffen.
\layout Standard

Die entstandene Struktur zeigt darauf aufbauend die Klassendiagramme aller
 Klassen im System.
 Einerseits erfolgt dies im Überblick, um die Kommunikation zwischen den
 einzelnen Klassen deutlich zu machen, und andererseits sieht dieses Dokument
 eine relativ detaillierte Beschreibung der einzelnen Klassen und ihrer
 wichtigen Methoden vor.
\layout Standard

Zur formalen Verdeutlichung wichtiger Zusammenhänge wird -- wo angebracht
 -- auf Sequenz- bzw.
 Kollaborationsdiagramme zurückgegriffen.
\layout Standard

Für das zu Grunde liegende Protokoll wird im vorliegenden Entwurf nur festgeschr
ieben, daß der Datenaustausch zwischen Server- und Clientpaket auf der Basis
 von Zeichenketten erfolgt.
 Eine genauere Spezifikation erfolgt in der Designphase.
\layout Standard

Nicht im Entwurf berücksichtig wurden die GUIs der Client- und AdminClient-Appli
kation, da grafische Oberflächen i.A.
 nicht mit der UML entworfen werden und algorithmisch betrachtet trivial
 sind.
 Die vorhandenene Funktionalität wird aber anhand der Methoden von Client
 und Administrationsclient deutlich.
\layout Section

Bemerkungen
\layout Standard

Um die geforderte Verwendung eines CASE-Tools (hier TogetherJ) nicht ad
 absurdum zu führen, beschränken wir uns in der Darstellung in diesem Dokument
 auf wichtige Details der entworfenen Struktur.
 Weitere Informationen sind aus den von TogetherJ erstellten Dateien ersichtlich
, die auf unserer Homepage verlinkt werden.
 Diese Projektdateien haben den Vorteil, daß sie neben der statischen auch
 eine dynamische, relationale Darstellung des Entwurfs ermöglichen, die
 zugleich navigierbar ist.
\layout Standard
\pagebreak_bottom 
TogetherJ in der Version 4.2 unterstützt keine bidirektionalen Assoziationen.
 Daher wurden nur dort zwei unidirektionale Assoziationen verwendet, wo
 sie explizit benötigt werden.
 Trotzdem sind in diesem Entwurf alle vorhandenen Assoziationen inhärent
 bidirektional.
\layout Section

Aktivitätsdiagramm
\layout Standard

Dieses Aktivitätsdiagramm veranschaulicht, wie eine Chat-Sitzung beispielhaft
 ablaufen könnte.
 Das Diagramm soll nur einen groben Überblick über die prinzipiellen Abläufe
 im System vermitteln und ist deswegen stark vereinfacht und informell.
\layout Standard

Der Benutzer startet den Chat-Client und meldet sich mit seinen Benutzerdaten
 an.
 Ab nun kümmert sich ein ClientServant um ihn, indem er zuerst diese Benutzerdat
en überprüft.
 Sind sie korrekt, sendet er eine Liste der verfügbaren Channel an den Benutzer.
 Dieser sucht sich nun den Channel aus, den er betreten möchte, woraufhin
 ihm sein ClientServant eine Liste der in diesem Channel anwesenden Benutzer
 sendet.
\layout Standard

Der Benutzer kann nun mit dem eigentlichen Chatten loslegen, indem er beispielsw
eise eine Begrüßungsnachricht an alle Benutzer in diesem Channel schickt,
 die vom ClientServant weiter verteilt wird.
 Anschließend lässt er noch einem einzelnen Benutzer eine private Nachricht
 zukommen, deren Zustellung auch der ClientServant in die Wege leitet.
 Anschließend meldet sich der Benutzer wieder ab, und die Chat-Sitzung ist
 beendet.
\layout Standard

Die meisten Aktivitäten in diesem Diagramm entsprechen jeweils einer Methode
 der Klassen Client und ClientServant.
\layout Standard

\begin_float fig 
\layout Standard
\align center 

\begin_inset Figure size 510 505
file eps/SampleChatActivity.eps
height 3 60,00
flags 9

\end_inset 


\layout Caption

Beispielverlauf eines Chats
\end_float 
\layout Section

Klassenstruktur
\layout Standard

In diesem Kapitel wird das für die Virtuelle Konferenz erforderliche System
 vorgestellt.
 Anhand erläuterter Klassendiagramme schildern wir die in der Entwurfsphase
 entwickelte Klassenstruktur.
\layout Subsection

Klassen des Servers
\layout Standard

Das Klassendiagramm in Abbildung\SpecialChar ~

\begin_inset LatexCommand \ref{ServerOverview}

\end_inset 

 auf S.\SpecialChar ~

\begin_inset LatexCommand \pageref{ServerOverview}

\end_inset 

 gibt einen Überblick über alle Klassen des Pakets Server mit sämtlichen
 Assoziationen.
\layout Standard

\begin_float fig 
\layout Standard
\align center 

\begin_inset Figure size 476 352
file eps/Serveroverview.eps
width 3 80,00
flags 11

\end_inset 


\layout Caption


\begin_inset LatexCommand \label{ServerOverview}

\end_inset 

Überblick über das Package Server
\end_float 
\layout Subsubsection

Struktur aus Sicht des Servers
\layout Standard

Das Klassendiagramm in Abbildung\SpecialChar ~

\begin_inset LatexCommand \ref{servercentric}

\end_inset 

 auf S.\SpecialChar ~

\begin_inset LatexCommand \pageref{servercentric}

\end_inset 

 zeigt inklusive aller Einzelheiten, mit welchen Klassen die Klasse Server
 direkt zusammenarbeitet.
\layout Standard

\begin_float fig 
\layout Standard
\align center 

\begin_inset Figure size 582 673
file eps/servercentric.eps
height 3 80,00
flags 11

\end_inset 


\layout Caption


\begin_inset LatexCommand \label{servercentric}

\end_inset 

Klassendiagramm aus Sicht des Servers
\end_float 
\layout Subsubsection

Struktur aus Sicht des ClientServants
\layout Standard

Das Klassendiagramm in Abbildung\SpecialChar ~

\begin_inset LatexCommand \ref{clientservantcentric}

\end_inset 

 auf S.\SpecialChar ~

\begin_inset LatexCommand \pageref{clientservantcentric}

\end_inset 

 zeigt, mit welchen Klassen ein ClientServant direkt interagiert.
\layout Standard

\begin_float fig 
\layout Standard
\align center 

\begin_inset Figure size 595 464
file eps/clientservercentric.eps
width 3 100,00
angle 90,00
flags 11

\end_inset 


\layout Caption


\begin_inset LatexCommand \label{clientservantcentric}

\end_inset 

Klassendiagramm aus Sicht der Klasse ClientServant
\end_float 
\layout Subsubsection

Struktur der Channel- und UserAdministration 
\layout Standard

Das UML-Klassendiagramm in Abbildung\SpecialChar ~

\begin_inset LatexCommand \ref{channeluser}

\end_inset 

 auf S.\SpecialChar ~

\begin_inset LatexCommand \pageref{channeluser}

\end_inset 

 gibt einen Überblick über die Klassen ChannelAdministration und UserAdministrat
ion mit den dazugehörigen Klassen Channel und User.
 Channel und User sind dabei Aggregationen, da sie eng verknüpft mit ihren
 Verwaltungsklassen sind.
 Zwischen den Klassen User und Channel gibt es zwei Assoziationen, die jeweils
 angeben, welche Benutzer welche Channel betreten dürfen und welche Benutzer
 sich momentan in einem Channel aufhalten.
\layout Standard

\begin_float fig 
\layout Standard
\align center 

\begin_inset Figure size 476 540
file eps/userchannel.eps
width 3 80,00
flags 11

\end_inset 


\layout Caption


\begin_inset LatexCommand \label{channeluser}

\end_inset 

Übersicht über die Klassen der Channel- und UserAdministration
\end_float 
\layout Subsection

Klassen des Clients
\layout Standard

Das UML-Klassendiagramm in Abbildung\SpecialChar ~

\begin_inset LatexCommand \ref{ClientOverview}

\end_inset 

 auf S.\SpecialChar ~

\begin_inset LatexCommand \pageref{ClientOverview}

\end_inset 

 zeigt alle Klassen des Clientpakets im Überblick.
 
\begin_float fig 
\layout Standard
\align center 

\begin_inset Figure size 416 197
file eps/clientoverview.eps
width 3 70,00
flags 11

\end_inset 


\layout Caption


\begin_inset LatexCommand \label{ClientOverview}

\end_inset 

Übersicht über das Package Client
\end_float 
Die Hauptfunktionalität des Client-Pakets ist in den Klassen Client und
 AdminClient enthalten, wobei AdminClient von Client abgeleitet ist.
 Sie enthalten die nötigen Methoden, die es dem Benutzer letztendlich ermögliche
n, zu interagieren.
 Die Klasse AdminClient stellt zusätzlich zu den normalen Methoden der Klasse
 Client noch Methoden zur Verfügung, mit denen Benutzer- bzw.
 Channeldaten bearbeitet werden können.
 
\layout Standard

Die Kommunikation zum Server läuft über die Klassen Uplink und Downlink.
 Diese dienen der Kommunikation zwischen Client und Server.
 Zu jedem Objekt der Klasse Client existiert jeweils ein Objekt der Klasse
 Uplink und Downlink.
 Objekte der Klasse Downlink laufen als Thread im Hintergund und horchen,
 ob eine Nachricht für ihr Client-Objekt vom Server gesendet worden ist,
 und übergeben, falls eine Nachricht vorhanden ist, diese an die Methode
 processMsg der Klasse Client.
 
\layout Standard

Über die Klasse Uplink werden Nachrichten vom Client an den Server übermittelt.
 Die Nachricht wird vom Client an seinen Uplink übergeben, welches dann
 durch seine Methoden die Nachricht an den Server sendet.
\layout Section

Klassenbeschreibungen
\layout Standard

Dieses Kapitel dient einer detaillierteren Beschreibung der entstandenen
 Struktur, indem sowohl die Klassen als auch ihre wichtigen Attribute und
 Methoden vorgestellt werden.
 Die angegebenen Assoziationen verdeutlichen überdies auch in den Klassenbeschre
ibungen noch einmal die Kommunikation der Klassen untereinander.
 
\begin_inset Quotes eld
\end_inset 

Get
\begin_inset Quotes erd
\end_inset 

 und 
\begin_inset Quotes eld
\end_inset 

Set
\begin_inset Quotes erd
\end_inset 

 Methoden sind implizit gegeben.
\layout Subsection

Das Package Server
\layout Standard

Im folgenden Abschnitt werden die Klassen des Serverpakets in ihren Einzelheiten
 geschildert.
\layout Subsubsection

Server
\layout Standard

Dieser Klasse stellt den eigentlichen Chat-Server dar.
 Nachdem er gestartet wurde, horcht der Server an einem bestimmten Port
 auf Verbindungswünsche von Clients.
 Sowie sich ein Client an diesem Port meldet, startet der Server einen ClientSer
vant, der sich ab dann ausschließlich um diesen Client kümmert.
 Anschließend horcht der Server wieder an seinem Port und wartet auf Verbindungs
wünsche von weiteren Clients.
\layout Paragraph

Attribute
\layout Description

private\SpecialChar ~
ChannelAdministration\SpecialChar ~
channelAdministration
\layout Description

private\SpecialChar ~
Vector\SpecialChar ~
clientServantList Eine Liste der aktiven ClientServants des
 Servers.
\layout Description

private\SpecialChar ~
DataBaseIO\SpecialChar ~
dataBaseIO Die Datenbank, in der die Informationen über
 User und Channel gespeichert werden.
 Von dort werden sie beim Start des Servers ausgelesen.
\layout Description

private\SpecialChar ~
final\SpecialChar ~
static\SpecialChar ~
int\SpecialChar ~
LISTEN_QUEUE_LENGTH Die Länge der Warteschlange, in
 der Verbindungswünsche von Clients zwischengespeichert werden, die nicht
 sofort verarbeitet werden können.
 Verbindungswünsche, die nicht mehr in die Warteschlange passen, werden
 automatisch abgewiesen (siehe auch java.net.ServerSocket).
\layout Description

private\SpecialChar ~
final\SpecialChar ~
static\SpecialChar ~
int\SpecialChar ~
SERVER_PORT
\lang american
 
\lang german
Der Port, auf dem der Server sein ServerSocket öffnet und auf Anfragen der
 Clients horcht.
\layout Description

private\SpecialChar ~
ServerSocket\SpecialChar ~
serverSocket
\layout Description

private\SpecialChar ~
UserAdministration\SpecialChar ~
userAdministration
\layout Paragraph

Methoden
\layout Description

public\SpecialChar ~
synchronized\SpecialChar ~
void\SpecialChar ~
addToClientServantList(ClientServant\SpecialChar ~
paramClientServant)
\lang american
 
\lang german
Fügt einen ClientServant zu der Liste aktiver ClientServants hinzu.
\layout Description

private\SpecialChar ~
void\SpecialChar ~
 Wartet auf ankommendene Verbindungswünsche der Clients und leitet
 diese an jeweils einen neu instanziierten ClientObserver weiter.
\layout Description

public\SpecialChar ~
synchronized\SpecialChar ~
void\SpecialChar ~
removeFromClientServantList(ClientServant\SpecialChar ~
paramClientServan
t)
\lang american
 
\lang german
Stoppt und entfernt einen ClientServant aus der Liste der aktiven ClientServants.
\layout Description

public\SpecialChar ~
void\SpecialChar ~
startServer()
\lang american
 
\lang german
Startet den Server, danach ist er vollständig betriebsbereit und kann Verbindung
swünsche von Clients behandeln.
\layout Description

public\SpecialChar ~
void\SpecialChar ~
stopServer()
\lang american
 
\lang german
Stoppt den Server, alle mit ihm verbundenen Clients werden abgemeldet.
\layout Subsubsection

ClientServant
\layout Standard

Eine Instanz dieser Klasse wird vom Server erzeugt, damit sie sich um genau
 einen Client kümmert und dessen Anfragen verarbeitet.
 Alle Aktionen, die der Benutzer im Chat ausführen möchte, sendet der Client
 an seinen ClientServant weiter, der dann diese Nachricht überprüft und
 die entsprechende Methode ausführt.
 Möchte der Benutzer beispielsweise in einen bestimmten Channel wechseln,
 macht er im GUI die dazu nötige Eingabe, der Client leitet eine entsprechende
 Nachricht an seinen ClientServant weiter, der dann schlussendlich den Benutzer
 in den gewünschten Channel eintreten lässt.
 
\layout Standard

Diese Klasse kümmert sich um die Anfragen, die von einem Client an den Server
 gestellt werden.
 Der Server erzeugt für jeden Client eine Instanz dieser Klasse, die sich
 von da an nur noch um diesen Client kümmert und seine Anfragen bearbeitet.
 In dieser Klasse steckt die meiste Funktionalität des Servers.
\layout Paragraph

Attribute
\layout Description

protected\SpecialChar ~
Socket\SpecialChar ~
socket
\layout Paragraph

Methoden
\layout Description

public\SpecialChar ~
void\SpecialChar ~
becomeAdminClientServant() Wenn der angemeldete Benutzer Administrator
rechte hat, dann wird aus dem ClientObserver automatisch ein AdminClientObserver
 mit erweiterter Funktionalität.
\layout Description

public\SpecialChar ~
void\SpecialChar ~
joinChannel(String\SpecialChar ~
name) Lässt den User in den Channel mit dem
 angegebenen Namen eintreten.
\layout Description

public\SpecialChar ~
void\SpecialChar ~
leaveChannel() Lässt den User den Channel verlassen.
\layout Description

public\SpecialChar ~
void\SpecialChar ~
loginGuest(String\SpecialChar ~
guestSet) Meldet einen Gast beim System an, benutzt
 dafür eine vom Client empfangene Zeichenkette mit Benutzerinformationen.
\layout Description

public\SpecialChar ~
void\SpecialChar ~
loginUser(String\SpecialChar ~
userSet) Meldet den User beim System an, benutzt
 dafür eine vom Client empfangene Zeichenkette mit Benutzerinformationen.
\layout Description

public\SpecialChar ~
void\SpecialChar ~
logoutUser() Meldet den User vom System ab und stoppt den Observer.
\layout Description

public\SpecialChar ~
synchronized\SpecialChar ~
void\SpecialChar ~
processMsg(String\SpecialChar ~
msg) Prüft den Inhalt einer vom Client
 empfangenen Nachricht und entscheidet, welche Funktionalität des ClientObserver
s aufgerufen werden muss, um den "Wunsch" des Clients zu erfüllen.
\layout Description

public\SpecialChar ~
void\SpecialChar ~
sendChannelData() Sendet die Daten des betretenen Channel an den
 Client.
\layout Description

public\SpecialChar ~
void\SpecialChar ~
sendMsgFromChannel(String\SpecialChar ~
msg) Sendet eine Nachricht, die in den
 besuchten Channel gesendet wurde, an den Client.
\layout Description

public\SpecialChar ~
void\SpecialChar ~
sendMsgFromUser(String\SpecialChar ~
msg) Sendet eine private Nachricht eines
 anderen Users an den Client.
\layout Description

public\SpecialChar ~
void\SpecialChar ~
sendMsgToChannel(String\SpecialChar ~
msg) Sendet eine Nachricht des Users an
 alle anderen User im Channel.
\layout Description

public\SpecialChar ~
void\SpecialChar ~
sendMsgToUser(String\SpecialChar ~
userName,\SpecialChar ~
String\SpecialChar ~
msg) Sendet eine private Nachricht
 des Users an einen anderen User.
\layout Description

public\SpecialChar ~
void\SpecialChar ~
sendUserData() Sendet die Daten des Users an den Client.
\layout Description

public\SpecialChar ~
void\SpecialChar ~
startClientServant() Startet den ClientObserver, danach ist er
 betriebsbereit und kann die Anfragen seines Clients bearbeiten.
\layout Description

public\SpecialChar ~
void\SpecialChar ~
stopClientServant() Stoppt den ClientServant.
\layout Subsubsection

AdminClientServant
\layout Standard

Wenn der Benutzer Administratorrechte hat, wird sein AdminClient von einem
 AdminClientServant statt von einem normalen ClientServant "bedient".
 Ein AdminClientServant funktioniert genauso wie ein ClientServant, kann
 allerdings noch zusätzlich administrative Nachrichten des AdminClients
 verarbeiten.Verarbeitet die Anfragen eines AdminClients.
 Erbt von ClientServant.
\layout Paragraph

Attribute
\layout Description

private\SpecialChar ~
ChannelAdministration\SpecialChar ~
channelAdministration
\layout Paragraph

Methoden
\layout Description

public\SpecialChar ~
AdminClientServant(Socket\SpecialChar ~
socket,Server\SpecialChar ~
server,ChannelAdministration\SpecialChar ~
paramCha
nnelAdministration,
\layout Description

UserAdministration\SpecialChar ~
paramUserAdministration,User\SpecialChar ~
paramUser) Konstruktor, setzt
 die entsprechenden Attribute.
\layout Description

public\SpecialChar ~
void\SpecialChar ~
addChannel(String\SpecialChar ~
channelSet) Fügt einen Channel hinzu.
\layout Description

public\SpecialChar ~
void\SpecialChar ~
addUser(String\SpecialChar ~
userSet) Fügt einen Benutzer hinzu.
\layout Description

public\SpecialChar ~
void\SpecialChar ~
deleteChannel(String\SpecialChar ~
channelName) Löscht den Channel mit dem angegebene
n Namen.
\layout Description

public\SpecialChar ~
void\SpecialChar ~
deleteUser(String\SpecialChar ~
userName) Löscht den Benutzer mit dem angegebenen
 Namen.
\layout Description

public\SpecialChar ~
void\SpecialChar ~
editChannel(String\SpecialChar ~
channelName,String\SpecialChar ~
newChannelSet) Verändert die
 Daten des angegebenen Channels.
\layout Description

public\SpecialChar ~
void\SpecialChar ~
editUser(String\SpecialChar ~
userName,String\SpecialChar ~
newUserSet) Ändert die Benutzerdaten
 des Users mit dem angegebenen Namen.
 Setzt die neuen Daten des Users mit den Daten aus newUserSet.
\layout Description

public\SpecialChar ~
void\SpecialChar ~
processMsg(String\SpecialChar ~
msg) Prüft den Inhalt einer vom AdminClient empfangen
en Nachricht und entscheidet, welche Methode aufgerufen werden muss, um
 den "Wunsch" des AdminClients zu erfüllen.
\layout Description

public\SpecialChar ~
void\SpecialChar ~
sendChannel(String\SpecialChar ~
channelName) Sendet die Channeldaten des Channels
 mit dem angegebenen Namen.
\layout Description

public\SpecialChar ~
void\SpecialChar ~
sendChannelList() Sendet eine Liste aller Channelnamen.
\layout Description

public\SpecialChar ~
void\SpecialChar ~
sendUser(String\SpecialChar ~
userName) Sendet die Benutzerdaten des Benutzers
 mit dem angegebenen Namen.
\layout Description

public\SpecialChar ~
void\SpecialChar ~
sendUserList() Sendet eine Liste aller Benutzernamen.
\layout Subsubsection

Uplink
\layout Standard

Der Uplink ist eine dem ClientServant zugeordnete Hilfsklasse.
 Zu jedem ClientServant existiert auch ein Objekt der Klasse Uplink.
 Die Klasse Uplink ist dafür zuständig, Daten vom ClientServant an den Client
 zu übermitteln (siehe auch analog dazu Kap.\SpecialChar ~

\begin_inset LatexCommand \ref{Client.Uplink}

\end_inset 

 auf S.\SpecialChar ~

\begin_inset LatexCommand \pageref{Client.Uplink}

\end_inset 

).
\layout Standard

Ermöglicht dem Observer das Senden von Nachrichten an die Clientapplikation.
\layout Paragraph

Methoden
\layout Description

public\SpecialChar ~
void\SpecialChar ~
send(String\SpecialChar ~
msg) Sendet eine Nachricht zur Clientapplikation.
\layout Description

public\SpecialChar ~
void\SpecialChar ~
startUplink() Startet den Stream, danach ist Uplink betriebsbereit.
\layout Description

public\SpecialChar ~
void\SpecialChar ~
stopUplink() Schließt den Stream.
\layout Subsubsection

Downlink
\layout Standard

Der Downlink ist eine dem ClientServant zugeordnete Klasse.
 Sie dient dazu, Nachrichten vom Client für den ClientServant zu empfangen,
 wobei der Downlink als Thread im Hintergrund läuft.
 Pro Objekt der Klasse ClientServant gibt es also genau ein Objekt der Klasse
 Downlink, das genau für diesen ClientServant zuständig ist und an dem für
 den ClientServant bestimmten Socket horcht (siehe auch analog dazu Kap.\SpecialChar ~

\begin_inset LatexCommand \ref{Client.Downlink}

\end_inset 

 auf S.\SpecialChar ~

\begin_inset LatexCommand \pageref{Client.Downlink}

\end_inset 

).
\layout Paragraph

Methoden
\layout Description

public\SpecialChar ~
void\SpecialChar ~
listen() Wartet auf ankommende Nachrichten und leitet diese an
 den ClientServant weiter.
\layout Description

public\SpecialChar ~
void\SpecialChar ~
run()
\layout Description

public\SpecialChar ~
void\SpecialChar ~
start()
\layout Description

public\SpecialChar ~
void\SpecialChar ~
startDownlink() Öffnet den Stream, danach ist der Downlink betriebsber
eit.
\layout Description

public\SpecialChar ~
void\SpecialChar ~
stopDownlink() Schließt den Stream.
\layout Paragraph

Assoziationen
\layout Subparagraph

zur Klasse Server.ClientServant
\layout Subsubsection

ChannelAdministration
\layout Standard

\begin_float margin 
\layout Standard

Prosatext fehlt noch
\end_float 
\layout Paragraph

Verwaltet die Channelobjekte.
\layout Paragraph

Attribute
\layout Description

private\SpecialChar ~
Vector\SpecialChar ~
channelList
\layout Description

private\SpecialChar ~
DataBaseIO\SpecialChar ~
dataBaseIO
\layout Description

public\SpecialChar ~
ChannelAdministration(DataBaseIO\SpecialChar ~
paramDataBaseIO)
\layout Paragraph

Methoden
\layout Description

public\SpecialChar ~
void\SpecialChar ~
addToChannelList(Channel\SpecialChar ~
paramChannel) Fügt einen Channel hinzu.
\layout Description

public\SpecialChar ~
void\SpecialChar ~
editChannel(String\SpecialChar ~
name,String\SpecialChar ~
newChannelData) Editiert den Channel
 mit dem angegebenen Namen mit einem neuen Datensatz aus einem String Parameters
: name - Der Name des Channels, der verändert werden soll newChannelData
 - String, der die neuen Daten des Channels enthält
\layout Description

public\SpecialChar ~
Channel\SpecialChar ~
getByName(String\SpecialChar ~
name) Gibt den Channel mit dem angegebenen
 Namen zurück.
\layout Description

public\SpecialChar ~
void\SpecialChar ~
removeFromChannelList(Channel\SpecialChar ~
paramChannel) Entfernt einen Channel.
\layout Subsubsection

UserAdministration
\layout Standard

Mit der Klasse UserAdministration werden Methoden bereitgestellt, um Benutzer
 im System zu verwalten.
 Die UserAdministration kann hier durch die Klasse "DataBaseIO" auf die
 Benutzerdatenbank zugreifen, um die Benutzer, deren Daten sich in der Klasse
 "User" befinden, laden, speichern oder löschen zu können.
\layout Paragraph

Attribute
\layout Description

private\SpecialChar ~
int\SpecialChar ~
maxUsers Maximale Anzahl von eingeloggten Benutzern im System.
\layout Description

private\SpecialChar ~
int\SpecialChar ~
numCurrentUsers Anzahl der eingeloggten Benutzer(registrierte
 und Gäste) im System.
\layout Description

private\SpecialChar ~
Vector\SpecialChar ~
userList
\layout Paragraph

Methoden
\layout Description

public\SpecialChar ~
void\SpecialChar ~
addToUserList(User\SpecialChar ~
paramUser) Fügt einen Benutzer hinzu.
\layout Description

public\SpecialChar ~
User\SpecialChar ~
getFromUserListByName(String\SpecialChar ~
name) Gibt den Benutzer mit dem angegebene
n Namen zurück.
\layout Description

public\SpecialChar ~
java.util.Vector\SpecialChar ~
getUserList()
\layout Description

public\SpecialChar ~
User\SpecialChar ~
loginGuest(String\SpecialChar ~
guestSet) 
\layout Description

public\SpecialChar ~
User\SpecialChar ~
loginUser(String\SpecialChar ~
userSet) Meldet einen Benutzer an, gibt den Benutzer
 zurück, falls Authentifizierung klappt, sonst null.
\layout Description

public\SpecialChar ~
void\SpecialChar ~
removeFromUserList(User\SpecialChar ~
paramUser) Entfernt einen Benutzer.
\layout Subsubsection

Channel
\layout Standard

Die Klasse Channel hält Daten für die entsprechenden Administrationsklassen
 bereit: Eine Instanz dieser Klasse kann wichtige Channeldaten wie z.B.
 berechtigte User oder im Channel befindliche User speichern.
 Außerdem stehen Methoden zur Verfügung, mit denen Listen der berechtigten
 bzw.
 im Raum befindlichen User abgefragt und übergeben werden können.
 Desweiteren können einzelne User zu den CurrentUser hinzugefügt bzw.
 wieder entfernt werden, wenn sie den Channel betreten bzw.
 verlassen.
\layout Standard

ein Channeldatensatz: Eine Instanz dieser Klasse kann wichtige Channeldaten
 wie z.B.
 berechtigte User oder im Channel befindliche User speichern.
 Außerdem stehen Methoden zur Verfügung, mit denen Listen der berechtigten
 bzw.
 im Raum befindlichen User abgefragt und übergeben werden können.
 Desweiteren können einzelne User zu den CurrentUser hinzugefügt bzw.
 wieder entfernt werden, wenn sie den Channel betreten bzw.
 verlassen.
\layout Paragraph

Attribute
\layout Description

private\SpecialChar ~
Vector\SpecialChar ~
allowedUserList Gibt die Benutzer an, die den Channel betreten
 dürfen.
\layout Description

private\SpecialChar ~
ChannelAdministration\SpecialChar ~
channelAdministration
\layout Description

private\SpecialChar ~
Vector\SpecialChar ~
currentUserList Gibt die Benutzer an, die sich momentan in
 dem Channel befinden.
\layout Description

private\SpecialChar ~
boolean\SpecialChar ~
modified Gibt an, ob der Datensatz seit dem letzten Laden
 verändert wurde - wird von DataBaseIO benötigt.
\layout Paragraph

Methoden
\layout Description

public\SpecialChar ~
Channel(String\SpecialChar ~
channelSet)
\layout Description

public\SpecialChar ~
void\SpecialChar ~
addToCurrentUserList(User\SpecialChar ~
paramUser) Fügt einen User zu den im
 Channel befindlichen Usern hinzu.
\layout Description

public\SpecialChar ~
void\SpecialChar ~
removeFromCurrentUserList(User\SpecialChar ~
paramUser) Entfernt einen User von
 den im Channel befindlichen Usern.
\layout Subsubsection

User
\layout Standard

Die Klasse User hält Daten für die entsprechenden Administrationsklassen
 bereit: In der Klasse "User" werden die Informationen des Benutzers gespeichert.
 Informationen, wie zum Bespiel der Name, Status oder die Rechte, die den
 Benutzer entweder als Administrator, normaler Benutzer kennzeichnen.
 Speziell während einer aktiven Verbindung mit dem Server werden darüberhinaus
 einige weitere Informationen gespeichert, etwa in welchem Channel der Benutzer
 sich befindet oder ob es sich bei ihm um einen Gast handelt.
 Die nötigen Daten können durch die "UserAdministration" aus der Benutzerdatenba
nk geladen werden.
\layout Paragraph

Attribute
\layout Description

private\SpecialChar ~
Vector\SpecialChar ~
allowedChannelList Gibt die Channels an, die der Benutzer betreten
 darf.
\layout Description

private\SpecialChar ~
Channel\SpecialChar ~
currentChannel Gibt den Channel an, in dem sich der Benutzer
 zur Zeit befindet.
\layout Description

private\SpecialChar ~
boolean\SpecialChar ~
isAdmin Ist der Benutzer ein Administrator?
\layout Description

private\SpecialChar ~
boolean\SpecialChar ~
isGuest Ist der Benutzer ein Gast?
\layout Description

private\SpecialChar ~
boolean\SpecialChar ~
loggedIn Gibt an, ob der Benutzer momentan das System benutzt.
\layout Description

private\SpecialChar ~
boolean\SpecialChar ~
modified Gibt an, ob der Datensatz seit dem letzten Laden
 verändert wurde - wird von DataBaseIO benötigt.
\layout Description

private\SpecialChar ~
String\SpecialChar ~
name
\layout Description

private\SpecialChar ~
String\SpecialChar ~
password
\layout Paragraph

Methoden
\layout Description

public\SpecialChar ~
Channel\SpecialChar ~
getFromAllowedChannelByName(String\SpecialChar ~
channelName) Gibt einen Channel
 aus der Liste der erlaubten Channels mit dem angegebenen Namen zurück
\layout Standard

Die entsprechenden Methoden, um die obigen Attribute zu füllen, werden bereitges
tellt.
 Da diese trivial sind, werden sie an dieser Stelle aus gelassen.
\layout Subsubsection

DataBaseIO
\layout Standard

Die Klasse DataBaseIO stellt Methoden bereit, um die Benutzer- und Channeldatenb
ank zu laden und zu speichern.
 Außerdem wird dafür gesorgt, daß für den Betrieb die relationalen Beziehungen
 zwischen User- und Channeldatenbank gesetzt werden.
\layout Paragraph

Attribute
\layout Description

private\SpecialChar ~
final\SpecialChar ~
static\SpecialChar ~
String\SpecialChar ~
userDBFile Dateiname der Benutzerdatenbank.
\layout Description

private\SpecialChar ~
final\SpecialChar ~
static\SpecialChar ~
String\SpecialChar ~
channelDBFile Dateiname der Channeldatenbank.
\layout Paragraph

Methoden
\layout Description

public\SpecialChar ~
void\SpecialChar ~
loadFromDisk() Lädt die Benutzer- und Channeldaten aus den angegebenen
 Dateien userDBFile und channelDBFile.
\layout Description

public\SpecialChar ~
void\SpecialChar ~
saveToDisk() Speichert die Benutzer- und Channeldaten entsprechend
 in userDBFile und channelDBFile.
\layout Description

private\SpecialChar ~
void\SpecialChar ~
doLinks() Stellt die relationalen Beziehungen zwischen den User-
 und Channeldatensätzen her.
\layout Subsection

Das Package Client
\layout Standard

Im folgenden Abschnitt werden die Klassen des Clientpaketes näher vorgestellt.
 
\layout Subsubsection

Client
\layout Standard

Die Klasse Client stellt alle notwendigen Methoden zur Verfügung, mit denen
 der Benutzer über das Graphical User Interface (GUI) mit dem Chat-Server
 interagieren kann.
 Hinter dem GUI steht sozusagen ein Objekt der Klasse Client.
 Wenn der Benutzer durch das GUI im Chat etwas macht (z.B.
 einen Channel betreten), leitet der Client diese Aktion als Anfrage an
 seinen ClientServant weiter.
 Der Client erhält dann von seinem ClientServant Rückmeldung zu seinen Anfragen,
 die er meist an das GUI weiterleitet.
 Die Kommunikation zwischen Client und ClientServant findet über den Downlink
 und Uplink statt.
\layout Paragraph

Attribute
\layout Description

protected\SpecialChar ~
Vector\SpecialChar ~
availableChannelList Vector von Strings, repräsentiert die
 für den Benutzer freigegebenen Channels.
\layout Description

protected\SpecialChar ~
Vector\SpecialChar ~
channelMsgBuffer Speichert ankommende Nachrichten in einem
 Channel.
 Wird von der GUI benutzt und kann als Protokoll der Unterhaltung in dem
 Channel dienen.
\layout Description

protected\SpecialChar ~
Vector\SpecialChar ~
currentUserInChannelList Vector von Strings, repräsentiert
 die aktuellen Benutzer in einem Channel.
\layout Description

protected\SpecialChar ~
final\SpecialChar ~
static\SpecialChar ~
String\SpecialChar ~
SERVER_IP Die IP - Adresse des Servers.
\layout Description

protected\SpecialChar ~
final\SpecialChar ~
static\SpecialChar ~
int\SpecialChar ~
SERVER_PORT Der Port des Servers.
\layout Description

protected\SpecialChar ~
Socket\SpecialChar ~
socket
\layout Paragraph

Methoden
\layout Description

public\SpecialChar ~
void\SpecialChar ~
joinChannel(String\SpecialChar ~
name) Betritt den angegebenen Channel.
\layout Description

public\SpecialChar ~
void\SpecialChar ~
leaveChannel() Verläßt den Channel.
\layout Description

public\SpecialChar ~
void\SpecialChar ~
login(String\SpecialChar ~
name,\SpecialChar ~
String\SpecialChar ~
password) Meldet den Benutzer an.
\layout Description

public\SpecialChar ~
void\SpecialChar ~
loginAsGuest(String\SpecialChar ~
name) Meldet einen Gast an.
\layout Description

public\SpecialChar ~
void\SpecialChar ~
logout() Meldet den Benutzer ab.
\layout Description

public\SpecialChar ~
void\SpecialChar ~
processMsg(String\SpecialChar ~
msg) Verarbeitet eine empfangene Nachricht, entscheid
et, welche Funktionalität aufgerufen werden muß.
 Nachrichten vom Server, die durch den Downlink empfangen werden, werden
 hier als Parameter eingesetzt.
\layout Description

public\SpecialChar ~
void\SpecialChar ~
sendMsgToChannel(String\SpecialChar ~
msg) Sendet eine Nachricht in einen Channel.
 Diese wird dann von allen Teilnehmern im Channel empfangen.
\layout Description

public\SpecialChar ~
void\SpecialChar ~
sendMsgToUser(String\SpecialChar ~
name,\SpecialChar ~
String\SpecialChar ~
msg) Sendet eine Nachricht an einen
 Benutzer.
 1 zu 1 Kommunikation
\layout Description

public\SpecialChar ~
void\SpecialChar ~
setAvailableChannelList(String\SpecialChar ~
channelSet) Setzt availableChannels
 mit den Daten aus dem String channelSet.
 Der Client erhält die für den Benutzer zugänglichen Channels.
\layout Description

public\SpecialChar ~
void\SpecialChar ~
setCurrentUserInChannelList(String\SpecialChar ~
userSet) Setzt currentUsers
 mit den Daten aus dem String userSet.
 Der Client erhält die Liste der aktuellen Benutzer in dem betretenen Channel.
\layout Paragraph

Assoziationen
\layout Subparagraph

zur Klasse Client.Uplink
\layout Subparagraph

zur Klasse Client.Downlink
\layout Subparagraph

zur Klasse java.lang.String
\layout Standard

Die IP - Adresse des Servers.
\layout Subparagraph

zur Klasse java.util.Vector
\layout Standard

Vector von Strings, repräsentiert die für den Benutzer freigegebenen Channels.
\layout Subparagraph

zur Klasse java.util.Vector
\layout Standard

Speichert ankommende Nachrichten in einem Channel.
 Wird von der GUI benutzt und kann als Protokoll der Unterhaltung in dem
 Channel dienen.
\layout Subparagraph

zur Klasse java.net.Socket
\layout Subparagraph

zur Klasse java.util.Vector
\layout Standard

Vector von Strings, repräsentiert die aktuellen Benutzer in einem Channel.
\layout Subsubsection

AdminClient
\layout Standard

Die Klasse AdminClient wird von der Klasse Client abgeleitet.
 Die Methode processMsg wird im AdminClient aufgrund erweiterter Funktionalität
 überschrieben.
 Die Klasse AdminClient liefert dem Administrator (Benutzer des Administrationsc
lients) die nötigen Methoden, um auf die Benutzer- und Channelverwaltung
 zuzugreifen, um also Benutzer und Channels anzulegen, zu editieren und
 zu löschen.
\layout Paragraph

Attribute
\layout Description

private\SpecialChar ~
Vector\SpecialChar ~
allChannelList Liste aller Channelnamen.
\layout Description

private\SpecialChar ~
Vector\SpecialChar ~
allUserList Liste aller Benutzernamen.
\layout Description

private\SpecialChar ~
String\SpecialChar ~
channelSet Ein Channeldatensatz als String.
\layout Description

private\SpecialChar ~
String\SpecialChar ~
userSet Ein Benutzerdatensatz als String.
\layout Paragraph

Methoden
\layout Description

public\SpecialChar ~
void\SpecialChar ~
addChannel(String\SpecialChar ~
channel) Fügt einen Channel mit den Daten aus
 dem String channel hinzu.
 Hiermit läßt sich ein neuer Channel erzeugen.
\layout Description

public\SpecialChar ~
void\SpecialChar ~
addUser(String\SpecialChar ~
user) Fügt den Benutzer mit den Daten aus user hinzu.
\layout Description

public\SpecialChar ~
void\SpecialChar ~
deleteChannel(String\SpecialChar ~
name) Löscht einen Channel.
\layout Description

public\SpecialChar ~
void\SpecialChar ~
deleteUser(String\SpecialChar ~
name) Löscht den Benutzer mit dem Namen name.
\layout Description

public\SpecialChar ~
void\SpecialChar ~
editChannel(String\SpecialChar ~
name,\SpecialChar ~
String\SpecialChar ~
channel) Setzt den Channel mit dem
 angegebenen Namen auf den neuen Datensatz aus dem String channel.
 Diese Methode wird verwendet, um Channeldaten zu verändern.
\layout Description

public\SpecialChar ~
void\SpecialChar ~
editUser(String\SpecialChar ~
name,\SpecialChar ~
String\SpecialChar ~
channel) Editiert einen Benutzer.
\layout Description

public\SpecialChar ~
void\SpecialChar ~
processMsg(String\SpecialChar ~
msg) Verarbeitet erweiterte Nachrichten, d.h.
 auch Nachrichten, die für die normalen Clients irrelevant sind, z.B.
 Änderungsmeldungen über Benutzer- und Channeldaten.
 Erweitert also Client.processMsg(String msg).
\layout Paragraph

Assoziationen
\layout Subparagraph

zur Klasse java.lang.String
\layout Standard

Ein Benutzerdatensatz als String.
\layout Subparagraph

zur Klasse java.lang.String
\layout Standard

Ein Channeldatensatz als String.
\layout Subparagraph

zur Klasse java.util.Vector
\layout Standard

Liste aller Benutzernamen.
\layout Subparagraph

zur Klasse java.util.Vector
\layout Standard

Liste aller Channelnamen.
\layout Subsubsection

Uplink
\begin_inset LatexCommand \label{Client.Uplink}

\end_inset 


\layout Standard

Zu jedem Client existiert auch ein Objekt der Klasse Uplink.
 Die Klasse Uplink ist dafür zuständig, Daten vom Client an den Server zu
 übermitteln.
\layout Paragraph

Attribute
\layout Description

private\SpecialChar ~
Socket\SpecialChar ~
socket
\layout Paragraph

Methoden
\layout Description

public\SpecialChar ~
void\SpecialChar ~
sendMsg(String\SpecialChar ~
msg) Sendet eine Nachricht an den Server.
\layout Description

public\SpecialChar ~
void\SpecialChar ~
startUplink() Startet den Stream.
\layout Description

public\SpecialChar ~
void\SpecialChar ~
stopUplink() Schließt den Stream.
\layout Paragraph

Assoziationen
\layout Subparagraph

zur Klasse java.net.Socket
\layout Subsubsection

Downlink
\begin_inset LatexCommand \label{Client.Downlink}

\end_inset 


\layout Standard

Die Klasse Downlink dient dazu, Nachrichten vom Server für den Client zu
 empfangen, wobei der Downlink als Thread im Hintergrund läuft.
 Pro Objekt der Klasse Client gibt es also genau ein Objekt der Klasse Downlink,
 das genau für diesen Client zuständig ist und an dem für den Client bestimmten
 Socket horcht.
\layout Paragraph

Attribute
\layout Description

private\SpecialChar ~
Socket\SpecialChar ~
socket
\layout Paragraph

Methoden
\layout Description

private\SpecialChar ~
void\SpecialChar ~
listen() Wartet auf ankommende Daten und leitet diese an den
 Client weiter.
\layout Description

public\SpecialChar ~
void\SpecialChar ~
run() Methode für den Thread.
\layout Description

public\SpecialChar ~
void\SpecialChar ~
startDownlink() Startet den Stream.
\layout Description

public\SpecialChar ~
void\SpecialChar ~
stopDownlink() Schließt den Stream.
\layout Paragraph

Assoziationen
\layout Subparagraph

zur Klasse Client.Client
\layout Subparagraph

zur Klasse java.net.Socket
\layout Section

Sequenzdiagramme
\layout Subsection

Client
\layout Subsubsection

Ausgehende Nachrichten
\layout Standard

Das Diagramm in Abbildung\SpecialChar ~

\begin_inset LatexCommand \ref{client.login}

\end_inset 

 zeigt am Beispiel einer Loginanforderung, wie ein Client eine Nachricht
 an den Server schickt:
\begin_float fig 
\layout Standard
\align center 

\begin_inset Figure size 595 326
file eps/Client.login(1).eps
width 3 100,00
flags 11

\end_inset 


\layout Caption


\begin_inset LatexCommand \label{client.login}

\end_inset 

Eine Benutzeranmeldung aus Clientsicht
\end_float 
\layout Subsubsection

Eingehende Nachrichten
\layout Standard

Das UML-Sequenzdiagramm in Abbildung\SpecialChar ~

\begin_inset LatexCommand \ref{client.availchannels}

\end_inset 

 zeigt stellvertretend für ähnliche Funktionen, wie ein Client über seinen
 Downlink eine Nachricht vom Server empfängt und diese Nachricht verarbeitet.
\layout Standard

\begin_float fig 
\layout Standard
\align center 

\begin_inset Figure size 595 176
file eps/client.Downlink.listen(1).eps
width 3 100,00
flags 11

\end_inset 


\layout Caption


\begin_inset LatexCommand \label{client.availchannels}

\end_inset 

Nachrichtenempfang auf Clientseite
\end_float 
\layout Subsection

ClientServant
\layout Subsubsection

Loginanfragen
\layout Standard

Das Sequenzdiagramm in Abbildung\SpecialChar ~

\begin_inset LatexCommand \ref{clientServant.loginUser}

\end_inset 

 auf S.\SpecialChar ~

\begin_inset LatexCommand \pageref{clientServant.loginUser}

\end_inset 

 zeigt, wie ein ClientServant auf Anfragen der Clientapplikation reagiert.
 In diesem speziellen Beispiel verarbeitet der ClientServant eine Loginanfrage.
 Dabei interagiert der ClientServant zusätzlich mit der Klasse UserAdministratio
n.
\layout Standard

\begin_float fig 
\layout Standard
\align center 

\begin_inset Figure size 1190 799
file eps/loginuser.eps
height 3 95,00
flags 11

\end_inset 


\layout Caption


\begin_inset LatexCommand \label{clientServant.loginUser}

\end_inset 

Eine Benutzeranmeldung aus Sicht des ClientServants
\end_float 
\layout Subsubsection

Textnachrichten an einen Channel
\layout Standard

Im Sequenzdiagramm in Abbildung\SpecialChar ~

\begin_inset LatexCommand \ref{clientServant.sendMsgToChannel}

\end_inset 

 auf S.\SpecialChar ~

\begin_inset LatexCommand \pageref{clientServant.sendMsgToChannel}

\end_inset 

 wird deutlich, mit welchen Schritten der ClientServant auf die Anfrage
 eines Clients reagiert, eine Nachricht an einen Channel zu versenden.
 Das Versenden einer Nachricht an nur einen Benutzer verläuft analog.
\layout Standard

\begin_float fig 
\layout Standard
\align center 

\begin_inset Figure size 2137 799
file eps/ClientServant.sendMsgToChannel(1).eps
height 3 95,00
flags 11

\end_inset 


\layout Caption


\begin_inset LatexCommand \label{clientServant.sendMsgToChannel}

\end_inset 

Nachrichtenverteilung durch den ClientServant
\end_float 
\layout Subsection

Server
\layout Subsubsection

Hochfahren
\layout Standard

Das Sequenzdiagramm in Abbildung\SpecialChar ~

\begin_inset LatexCommand \ref{server.startserver}

\end_inset 

 auf S.\SpecialChar ~

\begin_inset LatexCommand \pageref{server.startserver}

\end_inset 

 zeigt, wie die Klasse Server gestartet wird und wie eine ankommende Verbindung
 an einen ClientServant weitergeleitet wird.
\layout Standard

\begin_float fig 
\layout Standard
\align center 

\begin_inset Figure size 595 487
file eps/Server.startServer(1).eps
width 3 100,00
flags 11

\end_inset 


\layout Caption


\begin_inset LatexCommand \label{server.startserver}

\end_inset 

Hochfahren des Servers
\end_float 
\layout Section

Kollaborationsdiagramm
\layout Standard

Das UML-Kollaborationsdiagramm in Abbildung\SpecialChar ~

\begin_inset LatexCommand \ref{adminClientServer.deleteChannel}

\end_inset 

 auf S.\SpecialChar ~

\begin_inset LatexCommand \pageref{adminClientServer.deleteChannel}

\end_inset 

 zeigt die Zusammenarbeit zwischen den Klassen AdminClientServant, Uplink,
 Channel, ChannelAdministration, User und ClientServant am Beispiel der
 Funktionalität "Channel löschen".
 
\layout Standard

Ein AdminClientServant empfängt von seiner AdminClientapplikation den Aufruf,
 den Channel "foo" zu löschen.
 Der AdminClientServant ruft daraufhin bei der Klasse ChannelAdministration
 die entsprechende Funktion auf.
 Die ChannelAdministration löscht den Channel und benachrichtig alle betroffenen
 ClientServants, deren User sich in dem Channel befinden.
 Zum Schluß sendet der AdminClientServant über seinen Uplink die Statusmeldung
 über den Funktionsverlauf an seinen AdminClient.
 
\layout Standard

Dieses Kollaborationsdiagramm repräsentiert damit eine ganze Klasse von
 Funktionen, deren Interaktion mit anderen Klassen ähnlich verläuft (deleteUser,
 addChannel, editChannel etc.)
\layout Standard

\begin_float fig 
\layout Standard
\align center 

\begin_inset Figure size 628 799
file eps/deletechannel.eps
height 3 95,00
flags 11

\end_inset 


\layout Caption


\begin_inset LatexCommand \label{adminClientServer.deleteChannel}

\end_inset 

Die Funktion 
\begin_inset Quotes eld
\end_inset 

Channel löschen
\begin_inset Quotes erd
\end_inset 

 als Kollaborationsdiagramm
\end_float 
\layout Section

Anhang
\layout Subsection

Liste der Abbildungen:
\layout Standard


\begin_inset LatexCommand \listoffigures{}

\end_inset 


\layout Subsection

Verwendete Abkürzungen, Fachbegriffe etc.
\layout Itemize

CASE: Computer Aided Software Engineering
\layout Itemize

Channel: Konferenzraum, thematisch abgegrenzter Kommunikationsbereich
\layout Itemize

Chat: textbasierte Kommunikation über ein Netzwerk
\layout Itemize

GUI: Graphical User Interface, eine grafische Oberfläche für den Benutzer
\layout Itemize

JAVA: objektorientierte Programmiersprache von SUN
\layout Itemize

UML: Unified Modelling Language, entworfen von der OMG (Object Management
 Group)
\the_end
